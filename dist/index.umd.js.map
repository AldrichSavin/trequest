{"version":3,"file":"index.umd.js","sources":["../src/PluginEventEmitter.ts","../src/Core.ts","../src/EventEmitter.ts","../src/AbstractPlugin.ts","../src/Plugin.ts"],"sourcesContent":["import { PluginLifecycle, PluginDefine, Plugin } from \"./Plugin\";\nimport { IAbstractPlugin } from \"./AbstractPlugin\";\nimport Core from \"./Core\";\nimport { EventProperties } from \"./EventEmitter\";\n\nexport interface PluginEventEmitterType extends Plugin, IAbstractPlugin {}\n\nexport default class PluginEventEmitter extends Set<PluginEventEmitterType> {\n  constructor(private readonly coreContext = {}) {\n    super();\n  }\n\n  public register(\n    plugin: PluginEventEmitterType[] | PluginEventEmitterType\n  ): void {\n    const plugins = Array.isArray(plugin) ? plugin : [plugin];\n    plugins.forEach((plugin) => {\n      this.add(plugin);\n      plugin.onRegister?.(this.coreContext);\n    });\n  }\n\n  public initPluginContext(\n    plugins: PluginEventEmitterType[] | PluginEventEmitterType,\n    core: Core\n  ): void {\n    const pluginsArray = Array.isArray(plugins) ? plugins : [plugins];\n    pluginsArray.forEach((plugin) => {\n      plugin.setContext?.(core);\n    });\n    this.run(\"onInit\");\n  }\n\n  public unregister(plugin: PluginEventEmitterType): void {\n    this.delete(plugin);\n  }\n\n  /**\n   * filters plugins by lifecycle\n   *\n   * @param lifecycle PluginLifecycle\n   * @returns Plugin[Lifecycle][]\n   */\n  public filters<Lifecycle extends PluginLifecycle = PluginLifecycle>(\n    lifecycle: Lifecycle\n  ): PluginDefine[Lifecycle][] {\n    return Array.from(this)\n      .map((plugin) => {\n        if (plugin[lifecycle] && typeof plugin[lifecycle] === \"function\") {\n          return plugin[lifecycle]!.bind(plugin);\n        }\n        return undefined;\n      })\n      .filter(Boolean) as PluginDefine[Lifecycle][];\n  }\n\n  /**\n   * @title filters plugins by lifecycle and calls them\n   */\n  run<Lifecycle extends PluginLifecycle = PluginLifecycle>(\n    lifecycle: Lifecycle,\n    ...args: Parameters<PluginDefine[Lifecycle]>\n  ) {\n    const plugins = this.filters<Lifecycle>(lifecycle);\n    plugins.forEach((plugin) => {\n      plugin.apply(plugin, args);\n    });\n  }\n\n  /**\n   * @title filters plugins by lifecycle and calls them asynchronously\n   *\n   * @param lifecycle PluginLifecycle to filter\n   * @param args arguments to pass to the plugins lifecycle method (e.g. onInit)\n   * @returns Promise<ReturnType<PluginDefine[Lifecycle]>[]>\n   */\n  public runAsync<Lifecycle extends PluginLifecycle = PluginLifecycle>(\n    lifecycle: Lifecycle,\n    ...args: Parameters<PluginDefine[Lifecycle]>\n  ): Promise<ReturnType<PluginDefine[Lifecycle]>[]> {\n    const plugins = this.filters<Lifecycle>(lifecycle);\n    return Promise.all(\n      plugins.map((plugin) => {\n        return plugin.apply(plugin, args) as Promise<\n          ReturnType<PluginDefine[Lifecycle]>\n        >;\n      })\n    );\n  }\n\n  /**\n   * filters plugins by lifecycle and calls them synchronously\n   */\n  public async runSync<Lifecycle extends PluginLifecycle = PluginLifecycle>(\n    lifecycle: Lifecycle,\n    ...args: Parameters<PluginDefine[Lifecycle]>\n  ) {\n    for (const iterator of this.filters<Lifecycle>(lifecycle)) {\n      await iterator.apply(iterator, args);\n    }\n  }\n\n  /**\n   * @title filters plugins by lifecycle and calls them in an onion-like fashion\n   *\n   * @param lifecycle PluginLifecycle to filter\n   * @param args arguments to pass to the plugins lifecycle method (e.g. onInit)\n   * @returns ReturnType<PluginDefine[Lifecycle]> | undefined | void\n   */\n  public runOnion<Lifecycle extends PluginLifecycle = PluginLifecycle>(\n    lifecycle: Lifecycle,\n    ...args: Parameters<PluginDefine[Lifecycle]>\n  ): ReturnType<PluginDefine[Lifecycle]> | undefined | void {\n    const plugins = this.filters<Lifecycle>(lifecycle);\n    return plugins.reduce((prev, plugin) => {\n      return plugin.apply(plugin, args) ?? prev;\n    }, undefined);\n  }\n\n  /**\n   * @title filters plugins by lifecycle and calls them in an onion-like fashion asynchronously\n   *\n   * @param lifecycle PluginLifecycle to filter\n   * @param args arguments to pass to the plugins lifecycle method (e.g. onInit)\n   * @returns Promise<ReturnType<PluginDefine[Lifecycle]> | undefined | void>\n   */\n  public runOnionAsync<Lifecycle extends PluginLifecycle = PluginLifecycle>(\n    lifecycle: Lifecycle,\n    ...args: Parameters<PluginDefine[Lifecycle]>\n  ): Promise<ReturnType<PluginDefine[Lifecycle]> | undefined | void> {\n    const plugins = this.filters<Lifecycle>(lifecycle);\n    return plugins.reduce(async (prev, plugin) => {\n      const prevResult = await prev;\n      return plugin.apply(plugin, args) ?? prevResult;\n    }, Promise.resolve(undefined));\n  }\n\n  /**\n   * @title Find the plug-in by its name\n   */\n  getPluginByName(pluginName: EventProperties): PluginEventEmitterType | undefined {\n    return Array.from(this).find((plugin) => plugin.name === pluginName);\n  }\n}\n","import PluginEventEmitter, { PluginEventEmitterType } from \"./PluginEventEmitter\";\n\nexport interface CoreConfig {\n    plugins?: PluginEventEmitterType[];\n}\n\nexport default class Core extends PluginEventEmitter {\n    constructor(private readonly coreConfig: CoreConfig = {}) {\n        super();\n\n        // Mount plugins\n        this.mountPlugins();\n    }\n\n    private mountPlugins(): void {\n        const { plugins = [] } = this.coreConfig;\n        this.register(plugins);\n        this.initPluginContext(plugins, this);\n    }\n}","export type EventProperties = string | symbol;\nexport type EventListener<T extends any[] = []> = (...args: [...T]) => void;\n\nexport default class EventEmitter extends Map<EventProperties, EventListener> {\n    constructor() {\n        super();\n    }\n\n    on<T extends any[] = []>(event: EventProperties, listener: EventListener<T>): EventEmitter {\n        this.set(event, listener);\n        return this;\n    }\n\n    emit<T extends any[] = []>(event: EventProperties, ...args: [...T]): boolean {\n        const listener = this.get(event);\n        if (listener) {\n            listener.apply(this, args);\n            return true;\n        }\n        return false;\n    }\n\n    off(event: EventProperties): EventEmitter {\n        this.delete(event);\n        return this;\n    }\n}","import EventEmitter from \"./EventEmitter\";\n\nexport interface IAbstractPlugin {\n    name: string | symbol;\n    version?: string;\n    setContext(context: Record<string | number | symbol, any>): void;\n    getContext(): any;\n}\n\nexport default abstract class AbstractPlugin extends EventEmitter {\n    /**\n     * The runtime context of the plug-in\n     */\n    private _context: {} = {};\n\n    constructor() {\n        super();\n    }\n    \n    /**\n     * The name of the plug-in\n     */\n    abstract name: string | symbol;\n\n    /**\n     * The version number of the plug-in\n     */\n    protected version?: string;\n\n    /**\n     * This function will be called when the plug-in is registered, \n     * passing the current runtime context to each plug-in so that the plug-in can communicate directly\n     */\n    protected setContext(context): void {\n        this._context = context;\n    }\n\n    /**\n     * You can get the runtime context inside the plugin by modifying the function\n     */\n    protected getContext(): any {\n        return this._context;\n    }\n}","export interface PluginDefine {\n    /**\n     * on register plugin\n     */\n    onRegister: (context) => void;\n\n    /**\n     * Called after the plug-in has been initialized\n     * You can get the context by this.getContext() and do more (you can customize it)\n     */\n    onInit: () => void;\n\n    /**\n     * Before sending the request (before the request is sent, you can modify the request)\n     */\n    onBeforeRequest: (request) => void;\n    \n    /**\n     * Between onBeforeRequest and onRequest,\n     * if a mock identity is provided in onMockRequest,\n     * it will respond directly to onResponse as simulated data\n     */\n    onMockRequest: (request) => void;\n\n    /**\n     * Send request\n     */\n    onRequest: (request) => void;\n\n    // Timeout/Abort/NetworkError/CustomerError/ServerError\n    onError: (error) => void;\n\n    /**\n     * Retry request\n     */\n    onRetry: (request) => void;\n\n    /**\n     * Cancel request (abortï½œCancelToken.cancel)\n     */\n    onCancel: (request) => void;\n    \n    /**\n     * After receiving the response (you can modify the response)\n     */\n    onResponse: (response) => Promise<any> | void;\n\n    /**\n     * after all\n     */\n    onFinally: (response) => void;\n\n    /**\n     * destroy\n     */\n    destroy: () => void;\n}\n\nexport interface Plugin extends Partial<PluginDefine> {}\nexport type PluginLifecycle = keyof PluginDefine;\n\nexport default function Plugin() {}"],"names":["_settle","pact","state","value","_Pact","s","o","bind","v","prototype","then","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","PluginEventEmitter","_Set","coreContext","call","_inheritsLoose","_proto","register","plugin","_this2","Array","isArray","forEach","add","onRegister","initPluginContext","plugins","core","setContext","run","unregister","filters","lifecycle","from","map","filter","Boolean","_arguments","arguments","apply","slice","runAsync","_arguments2","Promise","all","runSync","_arguments3","_temp","_forOf","iterator","resolve","reject","runOnion","_arguments4","reduce","prev","_plugin$apply","undefined","runOnionAsync","_arguments5","prevResult","_plugin$apply2","getPluginByName","pluginName","find","name","_wrapNativeSuper","Set","Core","_PluginEventEmitter","coreConfig","mountPlugins","_this$coreConfig$plug","EventEmitter","_Map","on","event","listener","set","emit","get","off","Map","_EventEmitter","AbstractPlugin","_context","version","context","getContext"],"mappings":"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"}